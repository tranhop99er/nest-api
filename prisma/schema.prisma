datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                   String        @id @default(cuid())
  email                String        @unique
  password             String
  username             String
  office                       Office?                       @relation(fields: [officeId], references: [id])
  officeId                     String?
  status               AccountStatus @default(ACTIVE) //active, inactive
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  updatedByRef                 Account?                      @relation("UpdatedAccounts", fields: [updatedBy], references: [id])
  updatedBy                    String?
  accountsUpdated              Account[]                     @relation("UpdatedAccounts")
  twoFaSecret          String?
  lastVerifiedAt       DateTime?
  trustedDevice        String[]      @default([])
  twoFaEnabled         Boolean       @default(false)
  role                 Role // Role determines if the account is ADMIN, USER, or ADMIN_CS
  expiresAtTwoFaSecret DateTime? // Two factor authentication secret expiration time
  refreshToken         String? // Stores refresh token if necessary
  officesUpdated               Office[]                      @relation("UpdatedOffices")
  officesDirecting             Office?                       @relation("OfficeDirecting")
  user                 User?
  notes                Note[]        @relation("AccountNotes") // Account can create 1 note at a time (relation)
  labels               Label[]       @relation("AccountLabels") // Account can create 1 label at a time (relation)
  sharedNotes          SharedNote[] // Relation with SharedNote (many-to-many)
  Note                 Note[]
    notificationBotTargetAccount NotificationBotTargetAccount?

}

model NotificationBotTargetAccount {
  notificationBot   NotificationBot @relation(fields: [notificationBotId], references: [id])
  notificationBotId String
  account           Account         @relation(fields: [accountId], references: [id])
  accountId         String          @unique

  @@id([notificationBotId, accountId])
}

model NotificationBot {
  id                           String                         @id @default(cuid())
  office                       Office                         @relation(fields: [officeId], references: [id])
  officeId                     String                         @unique
  startDate                    String?
  endDate                      String?
  daysOfWeek                   Int[]
  time                         String?
  timeZone                     String?
  content                      String?
  notificationBotTargetAccount NotificationBotTargetAccount[]
}



model Office {
  id                                 String               @id @default(cuid())
  businessName                       String               @db.VarChar(255)
  businessPostalCode                 String
  businessAddress                    String
  representative                     String?
  officeName                         String
  officePostalCode                   String
  officeAddress                      String
  phoneNumber                        String
  openDate                           DateTime
  usedAt                             DateTime
  serviceType                        ServiceType
  services                           Json?
  director                           Account              @relation("OfficeDirecting", fields: [directorId], references: [id])
  directorId                         String               @unique
  status                             OfficeStatus         @default(ACTIVE)
  createdAt                          DateTime             @default(now())
  updatedAt                          DateTime             @updatedAt
  updatedByRef                       Account?             @relation("UpdatedOffices", fields: [updatedBy], references: [id])
  updatedBy                          String?
  account                            Account[]
  notificationBot                    NotificationBot?
  capacity                           String?
}

model User {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique // Ensure one-to-one relation with Account
}

model Label {
  id          String      @id @default(cuid())
  name        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   Account     @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "AccountLabels")
  createdById String
  status      LabelStatus @default(ACTIVE) //active, inactive
  notes       NoteLabel[] // Many-to-many relation with Note through NoteLabel
}

model Note {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   Account      @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "AccountNotes")
  createdById String
  labels      NoteLabel[] // Many-to-many relation with Label through NoteLabel
  sharedWith  SharedNote[] // Relation with SharedNote (many-to-many)
  Account     Account?     @relation(fields: [accountId], references: [id])
  accountId   String?
}

model NoteLabel {
  noteId  String
  labelId String
  note    Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([noteId, labelId]) // Composite primary key for the many-to-many relationship
}

model SharedNote {
  id                String  @id @default(cuid())
  note              Note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId            String
  sharedWithAccount Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId         String
}

enum Role {
  ADMIN
  USER
  ADMIN_CS
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum LabelStatus {
  ACTIVE
  INACTIVE
}

enum OfficeStatus {
  ACTIVE
  INACTIVE
}

enum ServiceType {
  OFFICE
  HOME
  HYBRID
}
